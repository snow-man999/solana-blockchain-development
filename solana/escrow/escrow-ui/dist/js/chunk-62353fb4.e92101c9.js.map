{"version":3,"sources":["webpack:///../src/utils/ed25519.ts","webpack:///../src/utils/to-buffer.ts","webpack:///../src/utils/borsh-schema.ts","webpack:///../src/publickey.ts","webpack:///../src/account.ts","webpack:///../src/bpf-loader-deprecated.ts","webpack:///../src/transaction/constants.ts","webpack:///../src/transaction/expiry-custom-errors.ts","webpack:///../src/message/account-keys.ts","webpack:///../src/layout.ts","webpack:///../src/utils/shortvec-encoding.ts","webpack:///../src/utils/assert.ts","webpack:///../src/message/compiled-keys.ts","webpack:///../src/utils/guarded-array-utils.ts","webpack:///../src/message/legacy.ts","webpack:///../src/message/v0.ts","webpack:///../src/message/versioned.ts","webpack:///../src/transaction/legacy.ts","webpack:///../src/transaction/message.ts","webpack:///../src/transaction/versioned.ts","webpack:///../src/timing.ts","webpack:///../src/sysvar.ts","webpack:///../src/errors.ts","webpack:///../src/utils/send-and-confirm-transaction.ts","webpack:///../src/utils/sleep.ts","webpack:///../src/instruction.ts","webpack:///../src/fee-calculator.ts","webpack:///../src/nonce-account.ts","webpack:///../src/utils/bigint.ts","webpack:///../src/programs/system.ts","webpack:///../src/loader.ts","webpack:///../src/bpf-loader.ts","webpack:///../node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","webpack:///../src/epoch-schedule.ts","webpack:///../src/__forks__/browser/fetch-impl.ts","webpack:///../src/rpc-websocket.ts","webpack:///../src/account-data.ts","webpack:///../src/programs/address-lookup-table/state.ts","webpack:///../src/utils/makeWebsocketUrl.ts","webpack:///../src/connection.ts","webpack:///../src/keypair.ts","webpack:///../src/programs/address-lookup-table/index.ts","webpack:///../src/programs/compute-budget.ts","webpack:///../src/programs/ed25519.ts","webpack:///../src/utils/secp256k1.ts","webpack:///../src/programs/secp256k1.ts","webpack:///../src/programs/stake.ts","webpack:///../src/programs/vote.ts","webpack:///../src/validator-info.ts","webpack:///../src/vote-account.ts","webpack:///../src/utils/cluster.ts","webpack:///../src/utils/send-and-confirm-raw-transaction.ts","webpack:///../src/index.ts","webpack:///../../../src/state/account.ts","webpack:///../../../../src/extensions/transferHook/state.ts","webpack:///../../../src/instructions/transfer.ts","webpack:///../../../src/instructions/initializeAccount.ts","webpack:///./src/util/initEscrow.ts","webpack:///../../src/decimal.ts","webpack:///../../src/native.ts","webpack:///../../src/web3.ts","webpack:///./src/Alice.vue?a354","webpack:///./src/Alice.vue","webpack:///./src/Alice.vue?7e53","webpack:///../../src/errors.ts","webpack:///../../../../src/extensions/transferHook/seeds.ts","webpack:///../../../../src/extensions/cpiGuard/state.ts","webpack:///../../../../src/extensions/defaultAccountState/state.ts","webpack:///../../../src/extensions/immutableOwner.ts","webpack:///../../../../src/extensions/interestBearingMint/state.ts","webpack:///../../../../src/extensions/memoTransfer/state.ts","webpack:///../../../../src/extensions/metadataPointer/state.ts","webpack:///../../../src/extensions/mintCloseAuthority.ts","webpack:///../../../src/extensions/nonTransferable.ts","webpack:///../../../src/extensions/permanentDelegate.ts","webpack:///../../../../src/extensions/transferFee/state.ts","webpack:///../../../src/extensions/extensionType.ts","webpack:///./node_modules/bignumber.js/bignumber.js","webpack:///./node_modules/bigint-buffer/dist/browser.js","webpack:///../../src/bigint.ts","webpack:///../../../src/instructions/internal.ts","webpack:///../../../src/state/mint.ts","webpack:///../../src/base.ts","webpack:///../../../src/extensions/accountType.ts","webpack:///../../../src/state/multisig.ts","webpack:///../../../src/instructions/types.ts"],"names":["generatePrivateKey","ed25519","utils","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","isOnCurve","ExtendedPoint","fromHex","sign","message","slice","verify","toBuffer","arr","buffer","Buffer","isBuffer","from","byteOffset","byteLength","Struct","constructor","properties","Object","assign","this","encode","borsh","serialize","SOLANA_SCHEMA","data","deserialize","deserializeUnchecked","Enum","super","enum","keys","length","Error","map","key","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","value","undefined","_bn","uniquePublicKeyCounter","PublicKey","decoded","bs58__default","default","decode","BN__default","equals","eq","toBase58","toBytes","toJSON","buf","b","toArrayLike","zeroPad","alloc","copy","get","Symbol","toStringTag","toString","fromPublicKey","seed","programId","buffer$1","concat","publicKeyBytes","sha256","seeds","forEach","TypeError","createProgramAddressSync","address","nonce","seedsWithNonce","err","findProgramAddressSync","pubkeyData","pubkey","_PublicKey","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","property","BufferLayout__namespace","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","voteAuthorizeWithSeedArgs","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","assert","condition","CompiledKeys","payer","keyMetaMap","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","END_OF_BUFFER_ERROR_MESSAGE","guardedShift","byteArray","guardedSplice","args","_args$","start","splice","Message","accountKeys","recentBlockhash","indexToProgramIds","account","accounts","getAccountKeys","compiledKeys","compile","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","transaction","signData","accountCount","i","dataSlice","messageArgs","MessageV0","compiledInstructions","addressTableLookups","count","lookup","numAccountKeysFromLookups","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","reduce","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","maskedPrefix","version","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","call","minContextSlot","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","options","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","_compile","valid","every","pair","serializeMessage","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","signatureErrors","_getMessageSignednessErrors","errors","missing","invalid","config","sigErrors","errorMessage","p","join","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","TransactionMessage","compiledIx","compileToLegacyMessage","compileToV0Message","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SendTransactionError","action","transactionMessage","logs","maybeLogsOutput","guideText","a","transactionLogs","cachedLogs","Promise","resolve","reject","getTransaction","then","tx","logMessages","catch","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","code","customMessage","name","async","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","setTimeout","encodeData","allocLength","layoutFields","decodeData$1","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","u64","BufferLayout","bigIntLayout","codec","codecsNumbers","getU64Codec","src","bigInt","SystemInstruction","checkProgramId","instructionTypeLayout","typeIndex","ixType","SYSTEM_INSTRUCTION_LAYOUTS","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","Transfer","toPubkey","TransferWithSeed","basePubkey","Allocate","accountPubkey","base","AllocateWithSeed","Assign","AssignWithSeed","CreateWithSeed","InitializeNonceAccount","noncePubkey","AdvanceNonceAccount","WithdrawNonceAccount","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","params","BigInt","createAccountWithSeed","createAccount","initParams","nonceInitialize","instructionData","CHUNK_SIZE","Loader","Math","ceil","chunkSize","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","allocate","owner","transfer","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","context","currentSlot","getSlot","slot","round","BPF_LOADER_PROGRAM_ID","BpfLoader","getMinNumSignatures","elf","loaderProgramId","load","objToString","objKeys","obj","val","isArrayProp","max","propVal","toStr","isFinite","fastStableStringify$1","returnVal","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","fetchImpl","globalThis","fetch","RpcWebSocketClient","rpcWebsockets","CommonClient","generate_request_id","webSocketFactory","url","rpc","WebSocket","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","_this$underlyingSocke","readyState","notify","_this$underlyingSocke2","decodeData","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","PublicKeyFromString","superstruct","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","applyDefaultMemcmpEncodingToFilters","filters","_filter$memcmp$encodi","memcmp","encoding","createRpcResult","result","union","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","number","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","validator","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","ParsedInstructionStruct","parsed","PartiallyDecodedInstructionStruct","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","innerInstructions","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","httpAgent","agent","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","clientBrowser","RpcClient__default","request","callback","method","body","headers","COMMON_HTTP_HEADERS","res","too_many_requests_retries","waitTime","statusText","text","ok","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","preBalances","postBalances","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","costUnits","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","lamportsPerSignature","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","_commitmentOrConfig","wsEndpoint","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_requestPromises$requ","_buildArgs","requestHash","fastStableStringify","unsafeRes","confirmTransactionInitialTimeout","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","getBalanceAndContext","e","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","configOrCommitment","configWithoutEncoding","baseSchema","withContext","strategy","rawSignature","decodedSignature","_config$abortSignal","aborted","reason","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","abortConfirmation","removeSignatureListener","expiryPromise","checkBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","_signatureStatus","signatureStatus","_outcome$slotInWhichN","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","epochSchedule","getLatestBlockhashAndContext","wireMessage","_config$lockedWritabl","lockedWritableAccounts","getRecentBlockhashAndContext","_buildArgsAtLeastConfirmed","transactionDetails","extra","c","block","endSlot","firstAvailableBlock","getFirstAvailableBlock","getConfirmedBlockSignatures","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","accountInfo","fromAccountData","to","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","transactionOrMessage","configOrSigners","includeAccounts","versionedTx","encodedTransaction","originalTx","_blockhashWithExpiryBlockHeight","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","Number","MAX_SAFE_INTEGER","clearInterval","hash","_setSubscription","nextSubscription","_this$_subscriptionsB","prevState","stateChangeCallbacks","cb","clientSubscriptionId","_this$_subscriptionSt","close","log","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","maybeFilters","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","Keypair","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","checkKeysLength","recentSlot","recipient","AddressLookupTableProgram","lookupTableAddress","bumpSeed","getU64Encoder","addr","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","units","additionalFee","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","PRIVATE_KEY_BYTES$1","PUBLIC_KEY_BYTES$1","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","privateKey","fromSecretKey","createInstructionWithPublicKey","ecdsaSign","msgHash","privKey","secp256k1","toCompactRawBytes","recovery","isValidPrivateKey","publicKeyCreate","PRIVATE_KEY_BYTES","ETHEREUM_ADDRESS_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","sha3","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","_Lockup","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","Initialize","stakePubkey","Delegate","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","Split","splitStakePubkey","Merge","sourceStakePubKey","Withdraw","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","maybeLockup","initialize","rentExemptReserve","splitInstruction","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","UpdateValidatorIdentity","VoteAuthorizationLayout","Voter","initializeAccount","currentVoteAccountBalance","rentExemptMinimum","withdraw","VALIDATOR_INFO_KEY","InfoString","website","details","iconUrl","keybaseUsername","ValidatorInfo","configKeyCount","configKeys","rawInfo","parse","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL","AccountState","AccountLayout","ACCOUNT_SIZE","TransferHookLayout","TRANSFER_HOOK_SIZE","TransferHookAccountLayout","bool","TRANSFER_HOOK_ACCOUNT_SIZE","ExtraAccountMetaLayout","ExtraAccountMetaListLayout","greedy","replicate","transferInstructionData","createTransferInstruction","destination","multiSigners","TOKEN_PROGRAM_ID","addSigners","TokenInstruction","initializeAccountInstructionData","createInitializeAccountInstruction","process","VUE_APP_SOLANA_RPC_URL","initEscrow","privateKeyByteArray","initializerXTokenAccountPubkeyString","amountXTokensToSendToEscrow","initializerReceivingTokenAccountPubkeyString","expectedAmount","escrowProgramIdString","initializerXTokenAccountPubkey","XTokenMintAccountPubkey","getParsedAccountInfo","privateKeyDecoded","split","s","initializerAccount","tempTokenAccount","createTempTokenAccountIx","initTempAccountIx","transferXTokensToTempAccIx","escrowAccount","escrowProgramId","createEscrowAccountIx","ESCROW_ACCOUNT_DATA_LAYOUT","initEscrowIx","of","BN","toArray","encodedEscrowState","decodedEscrowState","escrowAccountPubkey","isInitialized","initializerAccountPubkey","initializerPubkey","XTokenTempAccountPubkey","initializerTempTokenAccountPubkey","initializerYTokenAccount","initializerReceivingTokenAccountPubkey","toNumber","BigNumber","encodeDecode","boolLayout","publicKeyLayout","_hoisted_1","class","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","style","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","render","_ctx","_cache","$props","$setup","$data","$options","_ctx$escrowState$escr","_ctx$escrowState$isIn","_ctx$escrowState$init","_ctx$escrowState$XTok","_ctx$escrowState$init2","_ctx$escrowState$expe","_openBlock","_createElementBlock","_createElementVNode","for","_withDirectives","$event","formState","placeholder","disabled","loading","_vModelText","aliceXTokenAccountPubkey","min","aliceYTokenAccountPubkey","amountYTokensAliceExpects","onClick","resetAliceUI","onInitEscrow","isFormValid","_createCommentVNode","_toDisplayString","successMessage","_createTextVNode","escrowState","copyEscrowPubkey","defineComponent","setup","reactive","ref","computed","trim","String","navigator","clipboard","writeText","__exports__","TokenError","TokenAccountNotFoundError","TokenInvalidAccountError","TokenInvalidAccountOwnerError","TokenInvalidAccountSizeError","TokenInvalidMintError","TokenOwnerOffCurveError","TokenInvalidInstructionProgramError","TokenInvalidInstructionKeysError","TokenInvalidInstructionDataError","TokenInvalidInstructionTypeError","TokenTransferHookAccountNotFound","TokenTransferHookInvalidSeed","TokenTransferHookAccountDataNotFound","DISCRIMINATOR_SPAN","LITERAL_LENGTH_SPAN","INSTRUCTION_ARG_OFFSET_SPAN","INSTRUCTION_ARG_LENGTH_SPAN","ACCOUNT_KEY_INDEX_SPAN","ACCOUNT_DATA_ACCOUNT_INDEX_SPAN","ACCOUNT_DATA_OFFSET_SPAN","ACCOUNT_DATA_LENGTH_SPAN","unpackSeedLiteral","packedLength","unpackSeedInstructionArg","subarray","unpackSeedAccountKey","previousMetas","unpackSeedAccountData","dataIndex","unpackFirstSeed","discriminator","remaining","unpackSeeds","unpackedSeeds","CpiGuardLayout","CPI_GUARD_SIZE","DefaultAccountStateLayout","DEFAULT_ACCOUNT_STATE_SIZE","ImmutableOwnerLayout","IMMUTABLE_OWNER_SIZE","InterestBearingMintConfigStateLayout","s16","INTEREST_BEARING_MINT_CONFIG_STATE_SIZE","MemoTransferLayout","MEMO_TRANSFER_SIZE","MetadataPointerLayout","METADATA_POINTER_SIZE","MintCloseAuthorityLayout","MINT_CLOSE_AUTHORITY_SIZE","NonTransferableLayout","NON_TRANSFERABLE_SIZE","NON_TRANSFERABLE_ACCOUNT_SIZE","PermanentDelegateLayout","PERMANENT_DELEGATE_SIZE","MAX_FEE_BASIS_POINTS","transferFeeLayout","TransferFeeConfigLayout","TRANSFER_FEE_CONFIG_SIZE","TransferFeeAmountLayout","TRANSFER_FEE_AMOUNT_SIZE","ExtensionType","TYPE_SIZE","LENGTH_SIZE","addTypeAndLengthToLen","isVariableLengthExtension","TokenMetadata","getTypeLen","Uninitialized","TransferFeeConfig","TransferFeeAmount","MintCloseAuthority","ConfidentialTransferMint","ConfidentialTransferAccount","CpiGuard","DefaultAccountState","ImmutableOwner","MemoTransfer","MetadataPointer","NonTransferable","InterestBearingConfig","PermanentDelegate","NonTransferableAccount","TransferHook","TransferHookAccount","getLen","extensionTypes","baseSize","variableLengthExtensions","accountLength","ACCOUNT_TYPE_SIZE","element","extension","MULTISIG_SIZE","getMintLen","MINT_SIZE","getAccountLen","getExtensionData","tlvData","extensionTypeIndex","entryType","readUInt16LE","entryLength","globalObject","isNumeric","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","POWS_TEN","SQRT_BASE","MAX","clone","configObject","div","convertBase","parseNumeric","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabetHasNormalDecimalDigits","v","alphabet","caseChanged","isNum","_isBigNumber","charCodeAt","replace","search","substring","intCheck","DEBUG","charAt","toUpperCase","toLowerCase","format","rm","c0","ne","coeffToString","toExponential","toFixedPoint","maxOrMin","k","compare","normalise","j","pop","sd","r","d","ni","rd","xc","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","minimum","random","pow2_53","random53bitInt","dp","rand","Uint32Array","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","reverse","callerIsToString","multiply","m","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","isOdd","mod","times","integerValue","isEqualTo","isGreaterThan","gt","isGreaterThanOrEqualTo","gte","isLessThan","lt","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFormat","g1","g2","intPart","fractionPart","isNeg","intDigits","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toPrecision","z","l","zs","toBigIntLE","reversed","hex","toBigIntBE","toBufferLE","num","width","padStart","toBufferBE","exports","bigIntBE","u128","ownerOrAuthority","MintLayout","unpackMint","rawMint","AccountType","Mint","mintAuthority","mintAuthorityOption","supply","freezeAuthority","freezeAuthorityOption","MultisigLayout"],"mappings":"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","file":"js/chunk-62353fb4.e92101c9.js","sourcesContent":["import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","const END_OF_BUFFER_ERROR_MESSAGE = 'Reached end of buffer unexpectedly';\n\n/**\n * Delegates to `Array#shift`, but throws if the array is zero-length.\n */\nexport function guardedShift<T>(byteArray: T[]): T {\n  if (byteArray.length === 0) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.shift() as T;\n}\n\n/**\n * Delegates to `Array#splice`, but throws if the section being spliced out extends past the end of\n * the array.\n */\nexport function guardedSplice<T>(\n  byteArray: T[],\n  ...args:\n    | [start: number, deleteCount?: number]\n    | [start: number, deleteCount: number, ...items: T[]]\n): T[] {\n  const [start] = args;\n  if (\n    args.length === 2 // Implies that `deleteCount` was supplied\n      ? start + (args[1] ?? 0) > byteArray.length\n      : start >= byteArray.length\n  ) {\n    throw new Error(END_OF_BUFFER_ERROR_MESSAGE);\n  }\n  return byteArray.splice(\n    ...(args as Parameters<typeof Array.prototype.splice>),\n  );\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = guardedShift(byteArray);\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = guardedShift(byteArray);\n    const numReadonlyUnsignedAccounts = guardedShift(byteArray);\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = guardedSplice(byteArray, 0, accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = guardedSplice(byteArray, 0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\nimport {guardedShift, guardedSplice} from '../utils/guarded-array-utils';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = guardedShift(byteArray);\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: guardedShift(byteArray),\n      numReadonlySignedAccounts: guardedShift(byteArray),\n      numReadonlyUnsignedAccounts: guardedShift(byteArray),\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(\n      guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n    );\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = guardedShift(byteArray);\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = guardedSplice(\n        byteArray,\n        0,\n        accountKeyIndexesLength,\n      );\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(guardedSplice(byteArray, 0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = guardedSplice(\n        byteArray,\n        0,\n        writableIndexesLength,\n      );\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = guardedSplice(\n        byteArray,\n        0,\n        readonlyIndexesLength,\n      );\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\n/** @internal */\ntype MessageSignednessErrors = {\n  invalid?: PublicKey[];\n  missing?: PublicKey[];\n};\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures: boolean = true): boolean {\n    const signatureErrors = this._getMessageSignednessErrors(\n      this.serializeMessage(),\n      requireAllSignatures,\n    );\n    return !signatureErrors;\n  }\n\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(\n    message: Uint8Array,\n    requireAllSignatures: boolean,\n  ): MessageSignednessErrors | undefined {\n    const errors: MessageSignednessErrors = {};\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          (errors.missing ||= []).push(publicKey);\n        }\n      } else {\n        if (!verify(signature, message, publicKey.toBytes())) {\n          (errors.invalid ||= []).push(publicKey);\n        }\n      }\n    }\n    return errors.invalid || errors.missing ? errors : undefined;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (verifySignatures) {\n      const sigErrors = this._getMessageSignednessErrors(\n        signData,\n        requireAllSignatures,\n      );\n      if (sigErrors) {\n        let errorMessage = 'Signature verification failed.';\n        if (sigErrors.invalid) {\n          errorMessage += `\\nInvalid signature for public key${\n            sigErrors.invalid.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.invalid.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        if (sigErrors.missing) {\n          errorMessage += `\\nMissing signature for public key${\n            sigErrors.missing.length === 1 ? '' : '(s)'\n          } [\\`${sigErrors.missing.map(p => p.toBase58()).join('`, `')}\\`].`;\n        }\n        throw new Error(errorMessage);\n      }\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\nimport {guardedSplice} from '../utils/guarded-array-utils';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(guardedSplice(byteArray, 0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from './connection';\nimport {TransactionSignature} from './transaction';\n\nexport class SendTransactionError extends Error {\n  private signature: TransactionSignature;\n  private transactionMessage: string;\n  private transactionLogs: string[] | Promise<string[]> | undefined;\n\n  constructor({\n    action,\n    signature,\n    transactionMessage,\n    logs,\n  }: {\n    action: 'send' | 'simulate';\n    signature: TransactionSignature;\n    transactionMessage: string;\n    logs?: string[];\n  }) {\n    const maybeLogsOutput = logs\n      ? `Logs: \\n${JSON.stringify(logs.slice(-10), null, 2)}. `\n      : '';\n    const guideText =\n      '\\nCatch the `SendTransactionError` and call `getLogs()` on it for full details.';\n    let message: string;\n    switch (action) {\n      case 'send':\n        message =\n          `Transaction ${signature} resulted in an error. \\n` +\n          `${transactionMessage}. ` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      case 'simulate':\n        message =\n          `Simulation failed. \\nMessage: ${transactionMessage}. \\n` +\n          maybeLogsOutput +\n          guideText;\n        break;\n      default: {\n        message = `Unknown action '${((a: never) => a)(action)}'`;\n      }\n    }\n    super(message);\n\n    this.signature = signature;\n    this.transactionMessage = transactionMessage;\n    this.transactionLogs = logs ? logs : undefined;\n  }\n\n  get transactionError(): {message: string; logs?: string[]} {\n    return {\n      message: this.transactionMessage,\n      logs: Array.isArray(this.transactionLogs)\n        ? this.transactionLogs\n        : undefined,\n    };\n  }\n\n  /* @deprecated Use `await getLogs()` instead */\n  get logs(): string[] | undefined {\n    const cachedLogs = this.transactionLogs;\n    if (\n      cachedLogs != null &&\n      typeof cachedLogs === 'object' &&\n      'then' in cachedLogs\n    ) {\n      return undefined;\n    }\n    return cachedLogs;\n  }\n\n  async getLogs(connection: Connection): Promise<string[]> {\n    if (!Array.isArray(this.transactionLogs)) {\n      this.transactionLogs = new Promise((resolve, reject) => {\n        connection\n          .getTransaction(this.signature)\n          .then(tx => {\n            if (tx && tx.meta && tx.meta.logMessages) {\n              const logs = tx.meta.logMessages;\n              this.transactionLogs = logs;\n              resolve(logs);\n            } else {\n              reject(new Error('Log messages not found'));\n            }\n          })\n          .catch(reject);\n      });\n    }\n    return await this.transactionLogs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\nimport {SendTransactionError} from '../errors';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: 'send',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`,\n      });\n    }\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {getU64Codec} from '@solana/codecs-numbers';\n\nexport function u64(property?: string): Layout<bigint> {\n  const layout = blob(8 /* bytes */, property);\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n\n  const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n  const codec = getU64Codec();\n\n  bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n    const src = decode(buffer as Uint8Array, offset);\n    return codec.decode(src);\n  };\n\n  bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n    const src = codec.encode(bigInt) as Uint8Array;\n    return encode(src, buffer as Uint8Array, offset);\n  };\n\n  return bigIntLayout;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (!params.basePubkey.equals(params.fromPubkey)) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\n/**\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n *\n * @deprecated Deprecated since Solana v1.17.20.\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export const Headers: typeof globalThis.Headers = globalThis.Headers;\nexport const Request: typeof globalThis.Request = globalThis.Request;\nexport const Response: typeof globalThis.Response = globalThis.Response;\nexport default globalThis.fetch;\n","import {\n  CommonClient,\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n  WebSocket as createRpc,\n} from 'rpc-websockets';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends CommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = rpc.socket as ReturnType<typeof createRpc>;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<CommonClient['call']>\n  ): ReturnType<CommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<CommonClient['notify']>\n  ): ReturnType<CommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explicitly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to agave-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remarks If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction applyDefaultMemcmpEncodingToFilters(\n  filters: GetProgramAccountsFilter[],\n): GetProgramAccountsFilter[] {\n  return filters.map(filter =>\n    'memcmp' in filter\n      ? {\n          ...filter,\n          memcmp: {\n            ...filter.memcmp,\n            encoding: filter.memcmp.encoding ?? 'base58',\n          },\n        }\n      : filter,\n  );\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of base58-encoded account addresses to return post simulation state for */\n  accounts?: {\n    /** The encoding of the returned account's data */\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n  /** Optional parameter used to include inner instructions in the simulation */\n  innerInstructions?: boolean;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n  innerInstructions?: ParsedInnerInstruction[] | null;\n};\nconst ParsedInstructionStruct = pick({\n  program: string(),\n  programId: PublicKeyFromString,\n  parsed: unknown(),\n});\n\nconst PartiallyDecodedInstructionStruct = pick({\n  programId: PublicKeyFromString,\n  accounts: array(PublicKeyFromString),\n  data: string(),\n});\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n    innerInstructions: optional(\n      nullable(\n        array(\n          pick({\n            index: number(),\n            instructions: array(\n              union([\n                ParsedInstructionStruct,\n                PartiallyDecodedInstructionStruct,\n              ]),\n            ),\n          }),\n        ),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  programId?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n  /** The cost units consumed after processing the transaction */\n  costUnits?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n  /** The cost units consumed after processing the transaction */\n  costUnits?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since RPC v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.error(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  programId: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n  costUnits: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n  costUnits: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since RPC v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: nullable(ConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n  } & (\n    | {\n        encoding?: 'base58'; // Base-58 is the default when not supplied.\n        /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n        bytes: string;\n      }\n    | {\n        encoding: 'base64';\n        /** data to match, as base-64 encoded string */\n        bytes: string;\n      }\n  );\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\nexport type AccountSubscriptionConfig = Readonly<{\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /**\n   * Encoding format for Account data\n   *   - `base58` is slow.\n   *   - `jsonParsed` encoding attempts to use program-specific state parsers to return more\n   *      human-readable and explicit account state data\n   *   - If `jsonParsed` is requested but a parser cannot be found, the field falls back to `base64`\n   *     encoding, detectable when the `data` field is type `string`.\n   */\n  encoding?: 'base58' | 'base64' | 'base64+zstd' | 'jsonParsed';\n}>;\n\nexport type ProgramAccountSubscriptionConfig = Readonly<{\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /**\n   * Encoding format for Account data\n   *   - `base58` is slow.\n   *   - `jsonParsed` encoding attempts to use program-specific state parsers to return more\n   *      human-readable and explicit account state data\n   *   - If `jsonParsed` is requested but a parser cannot be found, the field falls back to `base64`\n   *     encoding, detectable when the `data` field is type `string`.\n   */\n  encoding?: 'base58' | 'base64' | 'base64+zstd' | 'jsonParsed';\n  /**\n   * Filter results using various filter objects\n   * The resultant account must meet ALL filter criteria to be included in the returned results\n   */\n  filters?: GetProgramAccountsFilter[];\n}>;\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   *\n   * @deprecated Deprecated since RPC v1.18; will be removed in a future version.\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      {\n        ...configWithoutEncoding,\n        ...(configWithoutEncoding.filters\n          ? {\n              filters: applyDefaultMemcmpEncodingToFilters(\n                configWithoutEncoding.filters,\n              ),\n            }\n          : null),\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since RPC v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const {\n      context,\n      value: {blockhash},\n    } = await this.getLatestBlockhashAndContext(commitment);\n    const feeCalculator = {\n      get lamportsPerSignature(): number {\n        throw new Error(\n          'The capability to fetch `lamportsPerSignature` using the `getRecentBlockhash` API is ' +\n            'no longer offered by the network. Use the `getFeeForMessage` API to obtain the fee ' +\n            'for a given message.',\n        );\n      },\n      toJSON() {\n        return {};\n      },\n    };\n    return {\n      context,\n      value: {\n        blockhash,\n        feeCalculator,\n      },\n    };\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since RPC v1.9.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since RPC v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since RPC v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   * @deprecated Deprecated since RPC v1.7.0. Please use {@link getSignaturesForAddress} instead.\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      if (\n        configOrSigners &&\n        typeof configOrSigners === 'object' &&\n        'innerInstructions' in configOrSigners\n      ) {\n        config.innerInstructions = configOrSigners.innerInstructions;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    if (\n      configOrSigners &&\n      typeof configOrSigners === 'object' &&\n      'innerInstructions' in configOrSigners\n    ) {\n      config.innerInstructions = configOrSigners.innerInstructions;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError({\n        action: 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash =\n          await this._blockhashWithExpiryBlockHeight(disableCache);\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      skipPreflight === true\n        ? 'processed' // FIXME Remove when https://github.com/anza-xyz/agave/pull/483 is deployed.\n        : (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs = undefined;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n\n      throw new SendTransactionError({\n        action: skipPreflight ? 'send' : 'simulate',\n        signature: '',\n        transactionMessage: res.error.message,\n        logs: logs,\n      });\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                console.error(\n                  `Received ${e instanceof Error ? '' : 'JSON-RPC '}error calling \\`${method}\\``,\n                  {\n                    args,\n                    error: e,\n                  },\n                );\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify([subscriptionConfig.method, args]);\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    config?: AccountSubscriptionConfig,\n  ): ClientSubscriptionId;\n  /** @deprecated Instead, pass in an {@link AccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId;\n  // eslint-disable-next-line no-dupe-class-members\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitmentOrConfig?: Commitment | AccountSubscriptionConfig,\n  ): ClientSubscriptionId {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n      config,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param config\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    config?: ProgramAccountSubscriptionConfig,\n  ): ClientSubscriptionId;\n  /** @deprecated Instead, pass in a {@link ProgramAccountSubscriptionConfig} */\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId;\n  // eslint-disable-next-line no-dupe-class-members\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitmentOrConfig?: Commitment | ProgramAccountSubscriptionConfig,\n    maybeFilters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      config\n        ? config\n        : maybeFilters\n          ? {filters: applyDefaultMemcmpEncodingToFilters(maybeFilters)}\n          : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param clientSubscriptionId client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param clientSubscriptionId client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {getU64Encoder} from '@solana/codecs-numbers';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [\n        params.authority.toBuffer(),\n        getU64Encoder().encode(params.recentSlot) as Uint8Array,\n      ],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeStateV2::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeStateV2.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(\n    params: SplitStakeParams,\n    // Compute the cost of allocating the new stake account in lamports\n    rentExemptReserve: number,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: rentExemptReserve,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(\n    params: SplitStakeWithSeedParams,\n    // If this stake account is new, compute the cost of allocating it in lamports\n    rentExemptReserve?: number,\n  ): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    if (rentExemptReserve && rentExemptReserve > 0) {\n      transaction.add(\n        SystemProgram.transfer({\n          fromPubkey: params.authorizedPubkey,\n          toPubkey: splitStakePubkey,\n          lamports: rentExemptReserve,\n        }),\n      );\n    }\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Update validator identity (node pubkey) vote account instruction params.\n */\nexport type UpdateValidatorIdentityParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  nodePubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'InitializeAccount'\n  | 'Withdraw'\n  | 'UpdateValidatorIdentity';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n  UpdateValidatorIdentity: IInstructionInputData;\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: BufferLayout.struct<\n      VoteInstructionInputData['UpdateValidatorIdentity']\n    >([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = 3762;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insufficient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n\n  /**\n   * Generate a transaction to update the validator identity (node pubkey) of a Vote account.\n   */\n  static updateValidatorIdentity(\n    params: UpdateValidatorIdentityParams,\n  ): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, nodePubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.UpdateValidatorIdentity;\n    const data = encodeData(type);\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\nimport {guardedShift, guardedSplice} from './utils/guarded-array-utils';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, validator logo URL */\n  iconUrl?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  iconUrl: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(\n        guardedSplice(byteArray, 0, PUBLIC_KEY_LENGTH),\n      );\n      const isSigner = guardedShift(byteArray) === 1;\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n * @param {Cluster} [cluster=\"devnet\"] - The cluster name of the RPC API URL to use. Possible options: 'devnet' | 'testnet' | 'mainnet-beta'\n * @param {boolean} [tls=\"http\"] - Use TLS when connecting to cluster.\n *\n * @returns {string} URL string of the RPC endpoint\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport {SendTransactionError} from '../errors';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    if (signature != null) {\n      throw new SendTransactionError({\n        action: sendOptions?.skipPreflight ? 'send' : 'simulate',\n        signature: signature,\n        transactionMessage: `Status: (${JSON.stringify(status)})`,\n      });\n    }\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n",null,null,null,null,"import { AccountLayout, TOKEN_PROGRAM_ID, createInitializeAccountInstruction, createTransferInstruction } from \"@solana/spl-token\";\nimport { Account, Connection, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, Transaction, TransactionInstruction } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { ESCROW_ACCOUNT_DATA_LAYOUT, EscrowLayout } from \"./layout\";\n\nconst connection = new Connection(\n  process.env.VUE_APP_SOLANA_RPC_URL || \"http://localhost:8899\", \n  'confirmed' as any\n);\n\nexport const initEscrow = async (\n    privateKeyByteArray: string,\n    initializerXTokenAccountPubkeyString: string,\n    amountXTokensToSendToEscrow: number,\n    initializerReceivingTokenAccountPubkeyString: string,\n    expectedAmount: number,\n    escrowProgramIdString: string) => {\n    const initializerXTokenAccountPubkey = new PublicKey(initializerXTokenAccountPubkeyString);\n\n    //@ts-expect-error\n    const XTokenMintAccountPubkey = new PublicKey((await connection.getParsedAccountInfo(initializerXTokenAccountPubkey, 'singleGossip')).value!.data.parsed.info.mint);\n\n    const privateKeyDecoded = privateKeyByteArray.split(',').map(s => parseInt(s));\n    const initializerAccount = new Account(privateKeyDecoded);\n\n    const tempTokenAccount = new Account();\n    const createTempTokenAccountIx = SystemProgram.createAccount({\n        programId: TOKEN_PROGRAM_ID,\n        space: AccountLayout.span,\n        lamports: await connection.getMinimumBalanceForRentExemption(AccountLayout.span, 'singleGossip'),\n        fromPubkey: initializerAccount.publicKey,\n        newAccountPubkey: tempTokenAccount.publicKey\n    });\n    const initTempAccountIx = createInitializeAccountInstruction(\n        tempTokenAccount.publicKey,\n        XTokenMintAccountPubkey,\n        initializerAccount.publicKey,\n        TOKEN_PROGRAM_ID\n    );\n    const transferXTokensToTempAccIx = createTransferInstruction(\n        initializerXTokenAccountPubkey,\n        tempTokenAccount.publicKey,\n        initializerAccount.publicKey,\n        amountXTokensToSendToEscrow,\n        [],\n        TOKEN_PROGRAM_ID\n    );\n    \n    const escrowAccount = new Account();\n    const escrowProgramId = new PublicKey(escrowProgramIdString);\n\n    const createEscrowAccountIx = SystemProgram.createAccount({\n        space: ESCROW_ACCOUNT_DATA_LAYOUT.span,\n        lamports: await connection.getMinimumBalanceForRentExemption(ESCROW_ACCOUNT_DATA_LAYOUT.span, 'singleGossip'),\n        fromPubkey: initializerAccount.publicKey,\n        newAccountPubkey: escrowAccount.publicKey,\n        programId: escrowProgramId\n    });\n\n    const initEscrowIx = new TransactionInstruction({\n        programId: escrowProgramId,\n        keys: [\n            { pubkey: initializerAccount.publicKey, isSigner: true, isWritable: false },\n            { pubkey: tempTokenAccount.publicKey, isSigner: false, isWritable: true },\n            { pubkey: new PublicKey(initializerReceivingTokenAccountPubkeyString), isSigner: false, isWritable: false },\n            { pubkey: escrowAccount.publicKey, isSigner: false, isWritable: true },\n            { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n            { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n        ],\n        data: Buffer.from(Uint8Array.of(0, ...new BN(expectedAmount).toArray(\"le\", 8)))\n    })\n\n    const tx = new Transaction()\n        .add(createTempTokenAccountIx, initTempAccountIx, transferXTokensToTempAccIx, createEscrowAccountIx, initEscrowIx);\n    await connection.sendTransaction(tx, [initializerAccount, tempTokenAccount, escrowAccount], {skipPreflight: false, preflightCommitment: 'singleGossip'});\n\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n\n    const encodedEscrowState = (await connection.getAccountInfo(escrowAccount.publicKey, 'singleGossip'))!.data;\n    const decodedEscrowState = ESCROW_ACCOUNT_DATA_LAYOUT.decode(encodedEscrowState) as EscrowLayout;\n    return {\n        escrowAccountPubkey: escrowAccount.publicKey.toBase58(),\n        isInitialized: !!decodedEscrowState.isInitialized,\n        initializerAccountPubkey: new PublicKey(decodedEscrowState.initializerPubkey).toBase58(),\n        XTokenTempAccountPubkey: new PublicKey(decodedEscrowState.initializerTempTokenAccountPubkey).toBase58(),\n        initializerYTokenAccount: new PublicKey(decodedEscrowState.initializerReceivingTokenAccountPubkey).toBase58(),\n        expectedAmount: new BN(decodedEscrowState.expectedAmount, 10, \"le\").toNumber()\n    };\n}\n",null,null,null,"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\"\n\nconst _hoisted_1 = { class: \"bg\" }\nconst _hoisted_2 = { class: \"mb-1\" }\nconst _hoisted_3 = [\"disabled\"]\nconst _hoisted_4 = { class: \"mb-1\" }\nconst _hoisted_5 = [\"disabled\"]\nconst _hoisted_6 = { class: \"mb-1\" }\nconst _hoisted_7 = [\"disabled\"]\nconst _hoisted_8 = { class: \"mb-1\" }\nconst _hoisted_9 = [\"disabled\"]\nconst _hoisted_10 = { class: \"mb-1\" }\nconst _hoisted_11 = [\"disabled\"]\nconst _hoisted_12 = { class: \"mb-1\" }\nconst _hoisted_13 = [\"disabled\"]\nconst _hoisted_14 = { class: \"mb-1\" }\nconst _hoisted_15 = [\"disabled\"]\nconst _hoisted_16 = [\"disabled\"]\nconst _hoisted_17 = {\n  key: 0,\n  style: {\"margin-left\":\"10px\"}\n}\nconst _hoisted_18 = {\n  key: 0,\n  class: \"mb-1 error-message\"\n}\nconst _hoisted_19 = {\n  key: 1,\n  class: \"mb-1 success-message\"\n}\nconst _hoisted_20 = { class: \"mb-1\" }\nconst _hoisted_21 = { class: \"mb-1\" }\nconst _hoisted_22 = { class: \"mb-1\" }\nconst _hoisted_23 = { class: \"mb-1\" }\nconst _hoisted_24 = { class: \"mb-1\" }\nconst _hoisted_25 = { class: \"mb-1\" }\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _cache[22] || (_cache[22] = _createElementVNode(\"p\", { class: \"title\" }, \"Escrow UI\", -1)),\n    _createElementVNode(\"div\", null, [\n      _createElementVNode(\"div\", _hoisted_2, [\n        _cache[9] || (_cache[9] = _createElementVNode(\"label\", { for: \"alice-private-key\" }, \"Throwaway private key (as byte array from sollet.io, without the '[]')\", -1)),\n        _withDirectives(_createElementVNode(\"input\", {\n          class: \"display-block\",\n          type: \"text\",\n          id: \"alice-private-key\",\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((_ctx.formState.privateKey) = $event)),\n          placeholder: \"e.g. 1,2,3,...\",\n          disabled: _ctx.loading\n        }, null, 8, _hoisted_3), [\n          [_vModelText, _ctx.formState.privateKey]\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_4, [\n        _cache[10] || (_cache[10] = _createElementVNode(\"label\", { for: \"alice-program-id\" }, \"Program id\", -1)),\n        _withDirectives(_createElementVNode(\"input\", {\n          class: \"display-block\",\n          type: \"text\",\n          id: \"alice-program-id\",\n          \"onUpdate:modelValue\": _cache[1] || (_cache[1] = ($event: any) => ((_ctx.formState.programId) = $event)),\n          placeholder: \"Program ID\",\n          disabled: _ctx.loading\n        }, null, 8, _hoisted_5), [\n          [_vModelText, _ctx.formState.programId]\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_6, [\n        _cache[11] || (_cache[11] = _createElementVNode(\"label\", { for: \"alice-x-token-acc\" }, \"Alice's X token account pubkey\", -1)),\n        _withDirectives(_createElementVNode(\"input\", {\n          class: \"display-block\",\n          type: \"text\",\n          id: \"alice-x-token-acc\",\n          \"onUpdate:modelValue\": _cache[2] || (_cache[2] = ($event: any) => ((_ctx.formState.aliceXTokenAccountPubkey) = $event)),\n          placeholder: \"X Token Account Pubkey\",\n          disabled: _ctx.loading\n        }, null, 8, _hoisted_7), [\n          [_vModelText, _ctx.formState.aliceXTokenAccountPubkey]\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_8, [\n        _cache[12] || (_cache[12] = _createElementVNode(\"label\", { for: \"alice-x-token-amount\" }, \"Amount of X tokens to send to escrow\", -1)),\n        _withDirectives(_createElementVNode(\"input\", {\n          class: \"display-block\",\n          type: \"number\",\n          id: \"alice-x-token-amount\",\n          \"onUpdate:modelValue\": _cache[3] || (_cache[3] = ($event: any) => ((_ctx.formState.amountXTokensToSendToEscrow) = $event)),\n          placeholder: \"Amount to send\",\n          min: \"0\",\n          disabled: _ctx.loading\n        }, null, 8, _hoisted_9), [\n          [_vModelText, _ctx.formState.amountXTokensToSendToEscrow]\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_10, [\n        _cache[13] || (_cache[13] = _createElementVNode(\"label\", { for: \"alice-y-token-acc\" }, \"Alice's Y token account pubkey\", -1)),\n        _withDirectives(_createElementVNode(\"input\", {\n          class: \"display-block\",\n          type: \"text\",\n          id: \"alice-y-token-acc\",\n          \"onUpdate:modelValue\": _cache[4] || (_cache[4] = ($event: any) => ((_ctx.formState.aliceYTokenAccountPubkey) = $event)),\n          placeholder: \"Y Token Account Pubkey\",\n          disabled: _ctx.loading\n        }, null, 8, _hoisted_11), [\n          [_vModelText, _ctx.formState.aliceYTokenAccountPubkey]\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_12, [\n        _cache[14] || (_cache[14] = _createElementVNode(\"label\", { for: \"alice-y-token-amount\" }, \"Amount of Y tokens Alice wants\", -1)),\n        _withDirectives(_createElementVNode(\"input\", {\n          class: \"display-block\",\n          type: \"number\",\n          id: \"alice-y-token-amount\",\n          \"onUpdate:modelValue\": _cache[5] || (_cache[5] = ($event: any) => ((_ctx.formState.amountYTokensAliceExpects) = $event)),\n          placeholder: \"Amount expected\",\n          min: \"0\",\n          disabled: _ctx.loading\n        }, null, 8, _hoisted_13), [\n          [_vModelText, _ctx.formState.amountYTokensAliceExpects]\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_14, [\n        _createElementVNode(\"input\", {\n          style: {\"margin-right\":\"5px\"},\n          class: \"cursor-pointer border-none bg-btn normal-font-size\",\n          type: \"button\",\n          value: \"Reset UI\",\n          onClick: _cache[6] || (_cache[6] = \n//@ts-ignore\n(...args) => (_ctx.resetAliceUI && _ctx.resetAliceUI(...args))),\n          disabled: _ctx.loading\n        }, null, 8, _hoisted_15),\n        _createElementVNode(\"input\", {\n          class: \"cursor-pointer border-none bg-btn normal-font-size\",\n          type: \"button\",\n          value: \"Init escrow\",\n          onClick: _cache[7] || (_cache[7] = \n//@ts-ignore\n(...args) => (_ctx.onInitEscrow && _ctx.onInitEscrow(...args))),\n          disabled: !_ctx.isFormValid || _ctx.loading\n        }, null, 8, _hoisted_16),\n        (_ctx.loading)\n          ? (_openBlock(), _createElementBlock(\"span\", _hoisted_17, \"Initializing escrow...\"))\n          : _createCommentVNode(\"\", true)\n      ]),\n      (_ctx.errorMessage)\n        ? (_openBlock(), _createElementBlock(\"div\", _hoisted_18, _toDisplayString(_ctx.errorMessage), 1))\n        : _createCommentVNode(\"\", true),\n      (_ctx.successMessage)\n        ? (_openBlock(), _createElementBlock(\"div\", _hoisted_19, _toDisplayString(_ctx.successMessage), 1))\n        : _createCommentVNode(\"\", true)\n    ]),\n    _createElementVNode(\"div\", null, [\n      _createElementVNode(\"div\", _hoisted_20, [\n        _cache[15] || (_cache[15] = _createTextVNode(\" Escrow account: \")),\n        _createElementVNode(\"div\", null, [\n          _createTextVNode(_toDisplayString(_ctx.escrowState.escrowAccountPubkey ?? '--') + \" \", 1),\n          (_ctx.escrowState.escrowAccountPubkey)\n            ? (_openBlock(), _createElementBlock(\"button\", {\n                key: 0,\n                onClick: _cache[8] || (_cache[8] = \n//@ts-ignore\n(...args) => (_ctx.copyEscrowPubkey && _ctx.copyEscrowPubkey(...args))),\n                style: {\"margin-left\":\"5px\"}\n              }, \"Copy\"))\n            : _createCommentVNode(\"\", true)\n        ])\n      ]),\n      _cache[21] || (_cache[21] = _createElementVNode(\"div\", { class: \"mb-1\" }, \" Decoded State \", -1)),\n      _createElementVNode(\"div\", _hoisted_21, [\n        _cache[16] || (_cache[16] = _createTextVNode(\" Is initialized: \")),\n        _createElementVNode(\"div\", null, _toDisplayString(_ctx.escrowState.isInitialized ?? '--'), 1)\n      ]),\n      _createElementVNode(\"div\", _hoisted_22, [\n        _cache[17] || (_cache[17] = _createTextVNode(\" Initializer account: \")),\n        _createElementVNode(\"div\", null, _toDisplayString(_ctx.escrowState.initializerAccountPubkey ?? '--'), 1)\n      ]),\n      _createElementVNode(\"div\", _hoisted_23, [\n        _cache[18] || (_cache[18] = _createTextVNode(\" X token temp account: \")),\n        _createElementVNode(\"div\", null, _toDisplayString(_ctx.escrowState.XTokenTempAccountPubkey ?? '--'), 1)\n      ]),\n      _createElementVNode(\"div\", _hoisted_24, [\n        _cache[19] || (_cache[19] = _createTextVNode(\" Initializer Y token account: \")),\n        _createElementVNode(\"div\", null, _toDisplayString(_ctx.escrowState.initializerYTokenAccount ?? '--'), 1)\n      ]),\n      _createElementVNode(\"div\", _hoisted_25, [\n        _cache[20] || (_cache[20] = _createTextVNode(\" ExpectedAmount: \")),\n        _createElementVNode(\"div\", null, _toDisplayString(_ctx.escrowState.expectedAmount ?? '--'), 1)\n      ])\n    ])\n  ]))\n}","\r\nimport { defineComponent, reactive, computed, ref } from \"vue\";\r\nimport { initEscrow } from \"./util/initEscrow\";\r\n\r\ninterface EscrowState {\r\n    escrowAccountPubkey: null | string;\r\n    isInitialized: null | boolean;\r\n    initializerAccountPubkey: null | string;\r\n    XTokenTempAccountPubkey: null | string;\r\n    initializerYTokenAccount: null | string;\r\n    expectedAmount: null | number;\r\n}\r\n\r\nexport default defineComponent({\r\n  setup() {\r\n    const formState = reactive({\r\n      privateKey: \"\",\r\n      programId: \"\",\r\n      aliceXTokenAccountPubkey: \"\",\r\n      aliceYTokenAccountPubkey: \"\",\r\n      amountXTokensToSendToEscrow: 0,\r\n      amountYTokensAliceExpects: 0\r\n    })\r\n\r\n    const escrowState: EscrowState = reactive({\r\n      escrowAccountPubkey: null,\r\n      isInitialized: null,\r\n      initializerAccountPubkey: null,\r\n      XTokenTempAccountPubkey: null,\r\n      initializerYTokenAccount: null,\r\n      expectedAmount: null\r\n    });\r\n\r\n    const loading = ref(false);\r\n    const errorMessage = ref(\"\");\r\n    const successMessage = ref(\"\");\r\n\r\n    const isFormValid = computed(() => {\r\n      return (\r\n        formState.privateKey.trim() !== \"\" &&\r\n        formState.programId.trim() !== \"\" &&\r\n        formState.aliceXTokenAccountPubkey.trim() !== \"\" &&\r\n        formState.aliceYTokenAccountPubkey.trim() !== \"\" &&\r\n        formState.amountXTokensToSendToEscrow > 0 &&\r\n        formState.amountYTokensAliceExpects > 0\r\n      );\r\n    });\r\n\r\n    const resetAliceUI = () => {\r\n      formState.privateKey = \"\";\r\n      formState.programId = \"\";\r\n      formState.aliceXTokenAccountPubkey = \"\";\r\n      formState.aliceYTokenAccountPubkey = \"\";\r\n      formState.amountXTokensToSendToEscrow = 0;\r\n      formState.amountYTokensAliceExpects = 0;\r\n      Object.keys(escrowState).forEach(key => escrowState[key as keyof EscrowState] = null);\r\n      errorMessage.value = \"\";\r\n      successMessage.value = \"\";\r\n    }\r\n\r\n    const onInitEscrow = async () => {\r\n      if (!isFormValid.value) {\r\n        errorMessage.value = \"Please fill in all fields with valid values.\";\r\n        return;\r\n      }\r\n      loading.value = true;\r\n      errorMessage.value = \"\";\r\n      successMessage.value = \"\";\r\n      try {\r\n        const {\r\n          escrowAccountPubkey,\r\n          isInitialized,\r\n          initializerAccountPubkey,\r\n          XTokenTempAccountPubkey,\r\n          initializerYTokenAccount,\r\n          expectedAmount\r\n        } = await initEscrow(\r\n          formState.privateKey,\r\n          formState.aliceXTokenAccountPubkey,\r\n          formState.amountXTokensToSendToEscrow,\r\n          formState.aliceYTokenAccountPubkey,\r\n          formState.amountYTokensAliceExpects,\r\n          formState.programId\r\n        );\r\n        escrowState.escrowAccountPubkey = escrowAccountPubkey;\r\n        escrowState.isInitialized = isInitialized;\r\n        escrowState.initializerAccountPubkey = initializerAccountPubkey;\r\n        escrowState.XTokenTempAccountPubkey = XTokenTempAccountPubkey;\r\n        escrowState.initializerYTokenAccount = initializerYTokenAccount;\r\n        escrowState.expectedAmount = expectedAmount;\r\n        successMessage.value = \"Escrow initialized successfully!\";\r\n      } catch(err) {\r\n        if (err instanceof Error) {\r\n          errorMessage.value = err.message;\r\n        } else {\r\n          errorMessage.value = String(err);\r\n        }\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    }\r\n\r\n    const copyEscrowPubkey = () => {\r\n      if (escrowState.escrowAccountPubkey) {\r\n        navigator.clipboard.writeText(escrowState.escrowAccountPubkey);\r\n        successMessage.value = \"Escrow account pubkey copied!\";\r\n      }\r\n    }\r\n\r\n    return {\r\n      formState,\r\n      resetAliceUI,\r\n      onInitEscrow,\r\n      escrowState,\r\n      loading,\r\n      errorMessage,\r\n      successMessage,\r\n      isFormValid,\r\n      copyEscrowPubkey\r\n    }\r\n  }\r\n})\r\n","import { render } from \"./Alice.vue?vue&type=template&id=b9df1e8c&ts=true\"\nimport script from \"./Alice.vue?vue&type=script&lang=ts\"\nexport * from \"./Alice.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"E:\\\\git\\\\solana-blockchain-development\\\\solana\\\\escrow\\\\escrow-ui\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__",null,null,null,null,null,null,null,null,null,null,null,null,null,";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.3.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, -1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // The index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne + (id === 2 && e > ne);\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    // If any number is NaN, return NaN.\r\n    function maxOrMin(args, n) {\r\n      var k, y,\r\n        i = 1,\r\n        x = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        y = new BigNumber(args[i]);\r\n        if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n          x = y;\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) {\r\n        t = xc;\r\n        xc = yc;\r\n        yc = t;\r\n        y.s = -y.s;\r\n      }\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) {\r\n        zc = xc;\r\n        xc = yc;\r\n        yc = zc;\r\n        i = xcL;\r\n        xcL = ycL;\r\n        ycL = i;\r\n      }\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) {\r\n        t = yc;\r\n        yc = xc;\r\n        xc = t;\r\n        b = a;\r\n      }\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) {\r\n          i = g1;\r\n          g1 = g2;\r\n          g2 = i;\r\n          len -= i;\r\n        }\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n",null,null,null,null,null,null,null],"sourceRoot":""}